import os
import requests
from telethon import TelegramClient, events, Button
from . import *

def upload_file(file_path):
    url = "https://catbox.moe/user/api.php"
    data = {"reqtype": "fileupload", "json": "true"}
    files = {"fileToUpload": open(file_path, "rb")}
    try:
        response = requests.post(url, data=data, files=files)
        response.raise_for_status()  # Raise an exception for bad status codes
        return True, response.text.strip()
    except requests.exceptions.RequestException as e:
        return False, f"·¥á Ä Ä·¥è Ä: {e}"

@ultroid_cmd(pattern="tgm")
async def get_link_group(event):
    if not event.is_reply:
        await event.reply("P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥á·¥Ö…™·¥Ä ·¥õ·¥è ·¥ú·¥ò ü·¥è·¥Ä·¥Ö ·¥è…¥ T·¥á ü·¥á…¢ Ä·¥Ä·¥ò ú")
        return

    replied_msg = await event.get_reply_message()
    media = replied_msg.media
    if not media:
        await event.reply("R·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥Ö·¥è·¥ás …¥·¥è·¥õ ·¥Ñ·¥è…¥·¥õ·¥Ä…™…¥ ·¥Ä ·¥ç·¥á·¥Ö…™·¥Ä “ì…™ ü·¥á.")
        return

        file_size = 0
    if replied_msg.photo:
        # 'sizes' adalah list, kita ambil ukuran terbesar dari list tersebut
        if replied_msg.photo.sizes:
            file_size = max(s.size for s in replied_msg.photo.sizes if hasattr(s, 'size'))
    elif replied_msg.video:
        file_size = replied_msg.video.size
    elif replied_msg.document:
        file_size = replied_msg.document.size
        
    if file_size > 200 * 1024 * 1024:
        await event.reply("P ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥ç·¥á·¥Ö…™·¥Ä “ì…™ ü·¥á ·¥ú…¥·¥Ö·¥á Ä 200MB.")
        return

    try:
        text_message = await event.reply("‚ùç  ú·¥è ü·¥Ö ·¥è…¥  ô·¥Ä ô è....‚ô°")

        async def progress(current, total):
            try:
                await event.eor(
                    text_message, f"üì• D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢... {current * 100 / total:.1f}%"
                )
            except Exception:
                pass

        try:
            local_path = await event.download_media(replied_msg, progress_callback=progress)
            await event.eor(text_message, "üì§ U·¥ò ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ò ú...")

            success, upload_path = upload_file(local_path)

            if success:
                await event.eor(
                    text_message,
                    f"üåê | [üëâ è·¥è·¥ú Ä  ü…™…¥·¥ã ·¥õ·¥Ä·¥ò  ú·¥á Ä·¥áüëà]({upload_path})",
                    buttons=[[Button.url(" ·¥õ·¥Ä·¥ò ·¥õ·¥è s·¥á·¥á ", upload_path)]],
                )
            else:
                await event.eor(
                    text_message,
                    f"·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥ú·¥ò ü·¥è·¥Ä·¥Ö…™…¥…¢  è·¥è·¥ú Ä “ì…™ ü·¥á\n{upload_path}",
                )

            try:
                os.remove(local_path)
            except Exception:
                pass

        except Exception as e:
            await event.eor(
                text_message, f"‚ùå F…™ ü·¥á ·¥ú·¥ò ü·¥è·¥Ä·¥Ö “ì·¥Ä…™ ü·¥á·¥Ö\n\n<i>R·¥á·¥Äs·¥è…¥: {e}</i>"
            )
            try:
                os.remove(local_path)
            except Exception:
                pass
            return
    except Exception as e:
        print(f"An error occurred: {e}")

@ultroid_cmd(pattern="tgh")
async def get_link_group_alt(event):
    # This is a duplicate of the .tgm command.
    # You can keep it if you want two different command names for the same function.
    if not event.is_reply:
        await event.reply("P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥á·¥Ö…™·¥Ä ·¥õ·¥è ·¥ú·¥ò ü·¥è·¥Ä·¥Ö ·¥è…¥ T·¥á ü·¥á…¢ Ä·¥Ä·¥ò ú")
        return

    replied_msg = await event.get_reply_message()
    media = replied_msg.media
    if not media:
        await event.reply("R·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥Ö·¥è·¥ás …¥·¥è·¥õ ·¥Ñ·¥è…¥·¥õ·¥Ä…™…¥ ·¥Ä ·¥ç·¥á·¥Ö…™·¥Ä “ì…™ ü·¥á.")
        return

        file_size = 0
    if replied_msg.photo:
        # 'sizes' adalah list, kita ambil ukuran terbesar dari list tersebut
        if replied_msg.photo.sizes:
            file_size = max(s.size for s in replied_msg.photo.sizes if hasattr(s, 'size'))
    elif replied_msg.video:
        file_size = replied_msg.video.size
    elif replied_msg.document:
        file_size = replied_msg.document.size
        
    if file_size > 200 * 1024 * 1024:
        await event.reply("P ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥ç·¥á·¥Ö…™·¥Ä “ì…™ ü·¥á ·¥ú…¥·¥Ö·¥á Ä 200MB.")
        return

    try:
        text_message = await event.reply("‚ùç  ú·¥è ü·¥Ö ·¥è…¥  ô·¥Ä ô è....‚ô°")

        async def progress(current, total):
            try:
                await event.eor(
                    text_message, f"üì• D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢... {current * 100 / total:.1f}%"
                )
            except Exception:
                pass

        try:
            local_path = await event.download_media(replied_msg, progress_callback=progress)
            await event.eor(text_message, "üì§ U·¥ò ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ò ú...")

            success, upload_path = upload_file(local_path)

            if success:
                await event.eor(
                    text_message,
                    f"üåê | [üëâ è·¥è·¥ú Ä  ü…™…¥·¥ã ·¥õ·¥Ä·¥ò  ú·¥á Ä·¥áüëà]({upload_path})",
                    buttons=[[Button.url(" ·¥õ·¥Ä·¥ò ·¥õ·¥è s·¥á·¥á ", upload_path)]],
                )
            else:
                await event.eor(
                    text_message,
                    f"·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥ú·¥ò ü·¥è·¥Ä·¥Ö…™…¥…¢  è·¥è·¥ú Ä “ì…™ ü·¥á\n{upload_path}",
                )

            try:
                os.remove(local_path)
            except Exception:
                pass

        except Exception as e:
            await event.eor(
                text_message, f"‚ùå F…™ ü·¥á ·¥ú·¥ò ü·¥è·¥Ä·¥Ö “ì·¥Ä…™ ü·¥á·¥Ö\n\n<i>R·¥á·¥Äs·¥è…¥: {e}</i>"
            )
            try:
                os.remove(local_path)
            except Exception:
                pass
            return
    except Exception as e:
        print(f"An error occurred: {e}")
